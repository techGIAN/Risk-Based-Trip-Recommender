from functional import seq
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point, LineString, Polygon
from shapely import wkt
from pprint import pprint
import folium
import matplotlib.pyplot as plt
import os
import webbrowser

import grid
from RiskMap import RiskMap
from utilityMethods import queryOSRM, get_path_points

# rm = RiskMap(w=2000)
mid = [43.7925759,-79.4293432]
m = folium.Map(location=mid, zoom_start=14)
src_poi = 'Home'
folium.Marker(
    location=mid,
    popup=src_poi,
    tooltip='<strong>' + src_poi + '</strong>',
    icon=folium.Icon(color='blue', prefix='fa', icon='home')
).add_to(m)

gdf_file = 'hex_gdf.csv'
df = pd.read_csv(gdf_file)
df['geometry'] = df['geometry'].apply(wkt.loads)
grid_gdf = gpd.GeoDataFrame(df, crs='epsg:4326')
folium.GeoJson(
    grid_gdf['geometry'], 
    style_function=lambda x:{'fillColor':'gray', 'color':'black'}
).add_to(m)

webname = 'sample_map.html'
m.save(webname)
path_to_open = 'file:///' + os.getcwd() + '/' + webname
webbrowser.open_new_tab(path_to_open)
exit()


# # north, south, west, east 
# # bounds = [43.7845, 43.7571, -79.5437, -79.4763]
bounds = [43.855943, 43.580178, -79.545557, -79.170079]

# # construct hex grid, w is the length of the long side in meters
# grid_gdf = grid.generate_hex_grid(bounds, w=2000) # should use w=2 meter hexes when on imac
# grid_gdf.to_file("sample/hexes")

# # grid_gdf = grid.GridDataFrame.from_file('sample/hexes')
# grid_gdf.to_csv('grid_gdf_sample.csv')
# # print(grid_gdf.geometry)
# # f = open('tester.txt', 'w')
# # f.write(grid_gdf.geometry)
# # f.close()
# grid_gdf.plot_map(figsize=(10, 6), alpha=0.2, edgecolor='k')
# plt.show()

# path = [[-79.428727,43.794801],[-79.428552,43.794461],[-79.428317,43.794239],[-79.427959,43.793953],[-79.427814,43.79385],[-79.427639,43.793725],[-79.427444,43.793498],[-79.427402,43.79341],[-79.427186,43.792953],[-79.42685,43.792151],[-79.426457,43.79123],[-79.426108,43.790383],[-79.42574,43.789513],[-79.425315,43.78861],[-79.425019,43.787772],[-79.42468,43.78698],[-79.424096,43.785617],[-79.422919,43.785888],[-79.421694,43.786148],[-79.4216,43.786167],[-79.421162,43.786257],[-79.421083,43.786275],[-79.420799,43.786336],[-79.420428,43.78643],[-79.420312,43.78646],[-79.419595,43.786616],[-79.417897,43.786986],[-79.417753,43.787017],[-79.41751,43.787041],[-79.417412,43.787051],[-79.41722,43.78706],[-79.417167,43.787076],[-79.416558,43.787201],[-79.416097,43.787296],[-79.415987,43.787319],[-79.413589,43.787858],[-79.412934,43.787992],[-79.410543,43.78851],[-79.41003,43.788622],[-79.409908,43.788648],[-79.40989,43.788579],[-79.40985,43.788421],[-79.409901,43.788198],[-79.40997,43.787932],[-79.409927,43.787552],[-79.409707,43.78697],[-79.409659,43.786829],[-79.409643,43.786771],[-79.409366,43.786168],[-79.4091,43.785746],[-79.408439,43.784832],[-79.408119,43.784067],[-79.407898,43.78352],[-79.407872,43.78345],[-79.407837,43.783369],[-79.407607,43.782834],[-79.407455,43.782499],[-79.40714,43.781722],[-79.407097,43.781629],[-79.406975,43.781655],[-79.406937,43.781662],[-79.405898,43.781853],[-79.405454,43.781948],[-79.404471,43.782157],[-79.40187,43.782752],[-79.400592,43.783038],[-79.399414,43.783302],[-79.399295,43.783328],[-79.399185,43.783353],[-79.39873,43.783452],[-79.397967,43.783618],[-79.397043,43.783819],[-79.396299,43.783981],[-79.395956,43.784047],[-79.395461,43.784156],[-79.39472,43.784326],[-79.394679,43.784335],[-79.394059,43.784473],[-79.393876,43.784514],[-79.393321,43.784649],[-79.39317,43.784687],[-79.393072,43.784716],[-79.392762,43.78481],[-79.39231,43.784948],[-79.392224,43.784974],[-79.392073,43.785017],[-79.391971,43.784995],[-79.391939,43.785003],[-79.39156,43.785095],[-79.391491,43.785166],[-79.391362,43.785195],[-79.390558,43.785385],[-79.390033,43.78551],[-79.389055,43.785727],[-79.387029,43.786162],[-79.386818,43.786155],[-79.38671,43.786179],[-79.386625,43.786198],[-79.386542,43.786217],[-79.386306,43.786269],[-79.386105,43.786365],[-79.38437,43.786749],[-79.381078,43.787469],[-79.380947,43.787451],[-79.380768,43.787485],[-79.380738,43.78749],[-79.38068,43.787556],[-79.37969,43.787773],[-79.378192,43.788101],[-79.376247,43.788514],[-79.375386,43.788703],[-79.373386,43.789152],[-79.373332,43.789164],[-79.373279,43.789176],[-79.373215,43.78919],[-79.373142,43.789206],[-79.371713,43.789529],[-79.369327,43.790005],[-79.368782,43.790048],[-79.368479,43.789994],[-79.368273,43.78992],[-79.368205,43.789873],[-79.368147,43.789833],[-79.368119,43.789814],[-79.367887,43.789585],[-79.367613,43.788351],[-79.367555,43.787986],[-79.367428,43.787467],[-79.367308,43.786999],[-79.36729,43.786924],[-79.366983,43.785607],[-79.366933,43.785382],[-79.366741,43.784571],[-79.366685,43.784328],[-79.366572,43.78387],[-79.36654,43.783746],[-79.366518,43.783649],[-79.366369,43.78297],[-79.366195,43.782183],[-79.366154,43.781976],[-79.366068,43.781608],[-79.365879,43.780758],[-79.365815,43.780472],[-79.365711,43.780007],[-79.365583,43.779439],[-79.365562,43.779346],[-79.365548,43.779283],[-79.36547,43.778958],[-79.365407,43.778695],[-79.365325,43.778361],[-79.365314,43.778305],[-79.365298,43.778222],[-79.365153,43.777438],[-79.365097,43.777163],[-79.364881,43.776151],[-79.364805,43.775756],[-79.36472,43.775388],[-79.364632,43.774936],[-79.364616,43.774858],[-79.364596,43.774765],[-79.364526,43.774392],[-79.364459,43.774031],[-79.364396,43.773382],[-79.364337,43.773139],[-79.364265,43.77277],[-79.364178,43.772441],[-79.364183,43.771832],[-79.364203,43.771746],[-79.364214,43.771695],[-79.364417,43.771685],[-79.364533,43.771681],[-79.365058,43.771636],[-79.365841,43.771539],[-79.366049,43.771517],[-79.366106,43.771587],[-79.366172,43.77173],[-79.366294,43.771826],[-79.366396,43.771849],[-79.36651,43.77185],[-79.366739,43.771805],[-79.367015,43.77175],[-79.367405,43.771663],[-79.367527,43.771597],[-79.367576,43.77154],[-79.367912,43.77169],[-79.368059,43.771847],[-79.368139,43.772009],[-79.368167,43.772236],[-79.368192,43.772434],[-79.368145,43.772532],[-79.368232,43.772974],[-79.368232,43.773047],[-79.368227,43.773084],[-79.368175,43.773121],[-79.368368,43.77409],[-79.368249,43.774084],[-79.368112,43.774092],[-79.368067,43.774098]]
# hex_grid = rm(w=2000)
# grid = hex_grid.grid_generator()
# print(hex_grid.path_risk(path=path))
# print(hex_grid.get_grid().head())
# hex_grid.save()
# hex_grid.plot()

coords = [[-79.41625, 43.699966], [-79.417172, 43.699786], [-79.417237, 43.699776], [-79.417331, 43.699753], [-79.41767, 43.70055], [-79.417895, 43.701124], [-79.417962, 43.70123], [-79.418022, 43.701312], [-79.418082, 43.701384], [-79.418762, 43.702053], [-79.418984, 43.702294], [-79.419065, 43.70236], [-79.419834, 43.702178], [-79.420297, 43.702084], [-79.420754, 43.701992], [-79.420864, 43.701972], [-79.421027, 43.701937], [-79.421168, 43.701909], [-79.422058, 43.701731], [-79.423107, 43.701513], [-79.425412, 43.701029], [-79.425547, 43.701006], [-79.425673, 43.700976], [-79.426267, 43.700855], [-79.426648, 43.700776], [-79.427586, 43.700551], [-79.427717, 43.700522], [-79.428664, 43.700324], [-79.428791, 43.700299], [-79.429029, 43.700249], [-79.429881, 43.70007], [-79.430789, 43.699871], [-79.430963, 43.699833], [-79.431122, 43.699801], [-79.43189, 43.699648], [-79.432282, 43.699563], [-79.4328, 43.699445], [-79.433393, 43.699313], [-79.433796, 43.699161], [-79.43418, 43.699074], [-79.434738, 43.698962], [-79.435236, 43.698893], [-79.435378, 43.698958], [-79.43544, 43.69898], [-79.435454, 43.699009], [-79.435548, 43.699278], [-79.435703, 43.699705], [-79.435907, 43.700134], [-79.436257, 43.700775], [-79.436534, 43.701282], [-79.437193, 43.702775], [-79.438206, 43.705203], [-79.438328, 43.705451], [-79.438585, 43.705911], [-79.438859, 43.706372], [-79.441622, 43.710576], [-79.442033, 43.711277], [-79.442403, 43.712032], [-79.442714, 43.712766], [-79.443794, 43.715557], [-79.443858, 43.71572], [-79.443957, 43.715979], [-79.445109, 43.718972], [-79.446241, 43.721907], [-79.446804, 43.723361], [-79.44682, 43.723398], [-79.447014, 43.723872], [-79.447383, 43.724863], [-79.447518, 43.725523], [-79.447629, 43.725963], [-79.447732, 43.726543], [-79.447812, 43.726984], [-79.447802, 43.727125], [-79.447805, 43.727278], [-79.447786, 43.727451], [-79.447705, 43.727676], [-79.447638, 43.727802], [-79.447443, 43.728063], [-79.447145, 43.728372], [-79.446609, 43.728832], [-79.44635, 43.729101], [-79.446212, 43.729181], [-79.445962, 43.729381], [-79.445546, 43.729626], [-79.445262, 43.72974], [-79.444925, 43.729829], [-79.444648, 43.729876], [-79.443764, 43.730075], [-79.44276, 43.730304], [-79.442146, 43.730513], [-79.441741, 43.730708], [-79.440554, 43.73146], [-79.440017, 43.73191], [-79.439451, 43.732303], [-79.438547, 43.732883], [-79.437501, 43.733515], [-79.435868, 43.734447], [-79.434454, 43.735289], [-79.433776, 43.735691], [-79.433521, 43.735848], [-79.433477, 43.735874], [-79.43201, 43.736731], [-79.430568, 43.737572], [-79.430195, 43.737795], [-79.429806, 43.738005], [-79.428729, 43.73864], [-79.425942, 43.740303], [-79.425889, 43.740339], [-79.424092, 43.741501], [-79.422786, 43.742309], [-79.420759, 43.74361], [-79.420242, 43.743938], [-79.419264, 43.744581], [-79.418311, 43.745184], [-79.417914, 43.745457], [-79.417407, 43.745907], [-79.416989, 43.746321], [-79.416174, 43.747215], [-79.416004, 43.747349], [-79.415412, 43.748036], [-79.415031, 43.748484], [-79.414543, 43.748951], [-79.413768, 43.749538], [-79.413084, 43.749991], [-79.41207, 43.750677], [-79.411121, 43.751198], [-79.410357, 43.751646], [-79.409917, 43.751896], [-79.409674, 43.752031], [-79.409485, 43.752128], [-79.409359, 43.752189], [-79.40929, 43.752222], [-79.409168, 43.752276], [-79.40899, 43.752353], [-79.40889, 43.752393], [-79.408385, 43.752595], [-79.408012, 43.752743], [-79.40791, 43.752783], [-79.407812, 43.752823], [-79.407709, 43.752869], [-79.40758, 43.752931], [-79.407467, 43.752994], [-79.407386, 43.753045], [-79.407303, 43.753103], [-79.407227, 43.75316], [-79.407151, 43.753225], [-79.407088, 43.753286], [-79.407024, 43.753353], [-79.406967, 43.75342], [-79.406912, 43.753492], [-79.406863, 43.753565], [-79.406821, 43.753637], [-79.406782, 43.753715], [-79.406751, 43.753792], [-79.406723, 43.753871], [-79.406702, 43.753948], [-79.406685, 43.75403], [-79.406666, 43.754155], [-79.406666, 43.754241], [-79.406672, 43.754326], [-79.406683, 43.754418], [-79.406704, 43.754508], [-79.40675, 43.754636], [-79.406786, 43.754722], [-79.40688, 43.754888], [-79.406934, 43.754965], [-79.406989, 43.755032], [-79.40705, 43.7551], [-79.407116, 43.755166], [-79.407188, 43.75523], [-79.407259, 43.755288], [-79.407337, 43.755346], [-79.407444, 43.755414], [-79.407596, 43.7555], [-79.407688, 43.755545], [-79.407783, 43.755586], [-79.40788, 43.755626], [-79.407977, 43.755662], [-79.408379, 43.755802], [-79.408678, 43.755907], [-79.408873, 43.755979], [-79.408971, 43.75602], [-79.409064, 43.756065], [-79.40915, 43.756117], [-79.40923, 43.756174], [-79.4093, 43.756236], [-79.409354, 43.756299], [-79.409403, 43.75637], [-79.409439, 43.756439], [-79.409471, 43.756512], [-79.409529, 43.756659], [-79.409738, 43.757152], [-79.409798, 43.757386], [-79.409902, 43.757798], [-79.409969, 43.758041], [-79.410015, 43.758221], [-79.410042, 43.758327], [-79.410111, 43.758601], [-79.410232, 43.758715], [-79.410271, 43.758879], [-79.410291, 43.758965], [-79.410316, 43.759071], [-79.410339, 43.759169], [-79.41038, 43.759324], [-79.410412, 43.759449], [-79.410454, 43.759608], [-79.41041, 43.759713], [-79.410452, 43.75988], [-79.41047, 43.759952], [-79.410484, 43.760039], [-79.410509, 43.760179], [-79.410512, 43.760201], [-79.410565, 43.760411], [-79.410659, 43.760476], [-79.410726, 43.760741], [-79.410711, 43.760858], [-79.410817, 43.761365], [-79.410834, 43.761468], [-79.410859, 43.761591], [-79.410885, 43.761694], [-79.410944, 43.761865], [-79.411076, 43.762385], [-79.411221, 43.763016], [-79.411272, 43.763219], [-79.411297, 43.763319], [-79.411324, 43.763412], [-79.411556, 43.764325], [-79.411679, 43.764808], [-79.411794, 43.765257], [-79.411902, 43.765689], [-79.412126, 43.766511], [-79.412138, 43.766612], [-79.412029, 43.766617], [-79.412007, 43.766618], [-79.411695, 43.766687], [-79.41165, 43.766697], [-79.411561, 43.766716], [-79.4115, 43.76673], [-79.411518, 43.766801], [-79.41152, 43.766808], [-79.411614, 43.767169]]
hex_grid = rm(w=2000)
dl = [[(-79.41625, 43.699966), (-79.418427, 43.70251)], [(-79.418427, 43.70251), (-79.411238, 43.704016)], [(-79.411238, 43.704016), (-79.406062, 43.705121)], [(-79.406062, 43.705121), (-79.400458, 43.706845)], [(-79.400458, 43.706845), (-79.399247, 43.710931)], [(-79.399247, 43.710931), (-79.400385, 43.716393)], [(-79.400385, 43.716393), (-79.401548, 43.721894)], [(-79.401548, 43.721894), (-79.40218, 43.725074)], [(-79.40218, 43.725074), (-79.403457, 43.729961)], [(-79.403457, 43.729961), (-79.404811, 43.735579)], [(-79.404811, 43.735579), (-79.406327, 43.742687)], [(-79.406327, 43.742687), (-79.407888, 43.749044)], [(-79.407888, 43.749044), (-79.40802, 43.75252)], [(-79.40802, 43.75252), (-79.408797, 43.754945)], [(-79.408797, 43.754945), (-79.408811, 43.754976)], [(-79.408811, 43.754976), (-79.410232, 43.758715)], [(-79.410232, 43.758715), (-79.410659, 43.760476)], [(-79.410659, 43.760476), (-79.411297, 43.763319)], [(-79.411297, 43.763319), (-79.411614, 43.767169)], [(-79.411614, 43.767169), (-79.41625, 43.699966)], [(-79.41625, 43.699966), (-79.419834, 43.702178)], [(-79.419834, 43.702178), (-79.425547, 43.701006)], [(-79.425547, 43.701006), (-79.425673, 43.700976)], [(-79.425673, 43.700976), (-79.429881, 43.70007)], [(-79.429881, 43.70007), (-79.435703, 43.699705)], [(-79.435703, 43.699705), (-79.441622, 43.710576)], [(-79.441622, 43.710576), (-79.446241, 43.721907)], [(-79.446241, 43.721907), (-79.445962, 43.729381)], [(-79.445962, 43.729381), (-79.435868, 43.734447)], [(-79.435868, 43.734447), (-79.422786, 43.742309)], [(-79.422786, 43.742309), (-79.411121, 43.751198)], [(-79.411121, 43.751198), (-79.40788, 43.755626)], [(-79.40788, 43.755626), (-79.410232, 43.758715)], [(-79.410232, 43.758715), (-79.410659, 43.760476)], [(-79.410659, 43.760476), (-79.411297, 43.763319)], [(-79.411297, 43.763319), (-79.411614, 43.767169)]]
ddl = []
for item in dl:
    ddl.append(LineString(item))
hex_grid.set_linestring(ls=ddl)
my_dict = hex_grid.hex_of_path()
hex_grid.compute_hex_risk()
r = hex_grid.path_risk()
# print(hex_grid.path_risk(path=path))
# print(hex_grid.get_grid().head())

exit()

linestring = LineString([(-79.41625, 43.699966), (-79.419834, 43.702178)])
linestring = LineString([(-79.419834, 43.702178), (-79.425547, 43.701006)])
# grid_gdf = grid.generate_hex_grid(bounds, w=2000)
df = pd.read_csv('grid_gdf_sample.csv')
df['geometry'] = df['geometry'].apply(wkt.loads)
grid_gdf = gpd.GeoDataFrame(df, crs='epsg:4326')
# grid_gdf.crs = 'EPSG:4326'
hexagons = list(grid_gdf['geometry'])
hex_ids = list(grid_gdf['cellID'])
hexes = []
i = 0
for h in hexagons:
    if linestring.intersects(Polygon(h)):
        hexes.append(hex_ids[i])
    i += 1
print(str(hexes))
exit()

# print(str(coords[0]))
# print(str(coords[len(coords)-1]))
# exit()
# S = coords[0]
# T = coords[len(coords)-1]
# mini_query = queryOSRM(S, T)
# gpp = get_path_points(mini_query)[2]
# print(gpp)
# print(sum(gpp))
discretized_points = []
S = coords[0]
discretized_points.append(S)
for i in range(1, len(coords)):
    T = coords[i]
    mini_query = queryOSRM(S, T)
    unit = sum(get_path_points(mini_query)[2])
    if unit >= 1:
        discretized_points.append(T)
        S = T
        print(unit)
# append the last point in the path
if T not in discretized_points:
    discretized_points.append(T)
print(str(discretized_points))